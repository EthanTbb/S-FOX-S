#include "StdAfx.h"
#include "Resource.h"
#include "GlobalUnits.h"
#include "GameFrameWnd.h"
#include "DlgGameOption.h"
#include ".\gameframewnd.h"

//////////////////////////////////////////////////////////////////////////////////

//控制按钮
#define IDC_MIN						100									//最小按钮
#define IDC_MAX						101									//最大按钮
#define IDC_CLOSE					102									//关闭按钮
#define IDC_OPTION					103									//选项按钮
#define IDC_MUTE					104									//静音按钮
#define IDC_RULE					105									//旁观按钮

//控件标识
#define IDC_SKIN_SPLITTER			200									//拆分控件
#define IDC_GAME_CLIENT_VIEW		201									//视图标识

//屏幕位置
#define BORAD_SIZE					3									//边框大小
#define CAPTION_SIZE				32									//标题大小

//控件大小
#define SPLITTER_CX					0									//拆分宽度
#define CAPTION_SIZE				32									//标题大小

//动画大小
#define FALSH_MOVIE_CX				300									//动画宽度
#define FALSH_MOVIE_CY				300									//动画高度

//屏幕限制
#define LESS_SCREEN_CY				740									//最小高度
#define LESS_SCREEN_CX				1024								//最小宽度

//////////////////////////////////////////////////////////////////////////////////
//控件定义

//按钮控件
const TCHAR* const szButtonMinControlName = TEXT("ButtonMin");
const TCHAR* const szButtonMaxControlName = TEXT("ButtonMax");
const TCHAR* const szButtonCloseControlName = TEXT("ButtonClose");
const TCHAR* const szButtonResoreControlName = TEXT("ButtonResore");

//按钮控件
const TCHAR* const szButtonRuleControlName = TEXT("ButtonRule");
const TCHAR* const szButtonMusicControlName = TEXT("ButtonMusic");
const TCHAR* const szButtonRuietControlName = TEXT("ButtonRuiet");
const TCHAR* const szButtonOptionControlName = TEXT("ButtonOption");

//////////////////////////////////////////////////////////////////////////////////

BEGIN_MESSAGE_MAP(CGameFrameWnd, CFGuiFrameWnd)

	//系统消息
	ON_WM_SIZE()
	ON_WM_CREATE()
	ON_WM_NCHITTEST()
	ON_WM_LBUTTONDOWN()
	ON_WM_LBUTTONDBLCLK()
	ON_WM_GETMINMAXINFO()
	ON_WM_SETTINGCHANGE()

	//自定消息
	ON_MESSAGE(WM_SETTEXT,OnSetTextMesage)

	ON_WM_DESTROY()
END_MESSAGE_MAP()

//////////////////////////////////////////////////////////////////////////////////

//构造函数
CFrameEncircle::CFrameEncircle()
{
}

//析构函数
CFrameEncircle::~CFrameEncircle()
{
}

//绘画处理
bool CFrameEncircle::PreDrawEncircleImage(tagEncircleBMP & EncircleImage)
{
	////加载图标
	//CBitImage ImageLogo;
	//ImageLogo.LoadFromResource(AfxGetInstanceHandle(),TEXT("GAME_LOGO"));

	////绘画图标
	//if (ImageLogo.IsNull()==false)
	//{
	//	//变量定义
	//	CDC * pDC=CDC::FromHandle(EncircleImage.ImageTL.GetDC());

	//	//绘画图标
	//	ImageLogo.TransDrawImage(pDC,10,6,RGB(255,0,255));

	//	//释放资源
	//	EncircleImage.ImageTL.ReleaseDC();
	//}

	return true;
}

//////////////////////////////////////////////////////////////////////////////////

//构造函数
CGameFrameWnd::CGameFrameWnd()
{
	//滚动变量
	m_nScrollXPos=0L;
	m_nScrollYPos=0L;
	m_nScrollXMax=0L;
	m_nScrollYMax=0L;

	//状态变量
	m_bMaxShow=false;
	m_bShowControl=true;
	m_rcNormalSize.SetRect(0,0,0,0);

	//组件接口
	m_pIClientKernel=NULL;
	m_pIGameFrameView=NULL;

	//控件指针
	m_pDlgGameRule=NULL;

	//框架环绕
	tagEncircleResource	EncircleFrame;
	EncircleFrame.pszImageTL=MAKEINTRESOURCE(IDB_FRAME_TL);
	EncircleFrame.pszImageTM=MAKEINTRESOURCE(IDB_FRAME_TM);
	EncircleFrame.pszImageTR=MAKEINTRESOURCE(IDB_FRAME_TR);
	EncircleFrame.pszImageML=MAKEINTRESOURCE(IDB_FRAME_ML);
	EncircleFrame.pszImageMR=MAKEINTRESOURCE(IDB_FRAME_MR);
	EncircleFrame.pszImageBL=MAKEINTRESOURCE(IDB_FRAME_BL);
	EncircleFrame.pszImageBM=MAKEINTRESOURCE(IDB_FRAME_BM);
	EncircleFrame.pszImageBR=MAKEINTRESOURCE(IDB_FRAME_BR);
	m_FrameEncircle.InitEncircleResource(EncircleFrame,GetModuleHandle(GAME_FRAME_DLL_NAME));

	//注册组件
	CGlobalUnits * pGlobalUnits=CGlobalUnits::GetInstance();
	pGlobalUnits->RegisterGlobalModule(MODULE_GAME_FRAME_WND,QUERY_ME_INTERFACE(IUnknownEx));

	return;
}

//析构函数
CGameFrameWnd::~CGameFrameWnd()
{
	//销毁控件
	if(m_pDlgGameRule)
	{
		if(m_pDlgGameRule->m_hWnd != NULL)m_pDlgGameRule->DestroyWindow();
		delete m_pDlgGameRule;
		m_pDlgGameRule=NULL;
	}
}

//接口查询
VOID * CGameFrameWnd::QueryInterface(REFGUID Guid, DWORD dwQueryVer)
{
	QUERYINTERFACE(IGameFrameWnd,Guid,dwQueryVer);
	QUERYINTERFACE(IFlashControlSink,Guid,dwQueryVer);
	QUERYINTERFACE(IClientPropertySink,Guid,dwQueryVer);
	QUERYINTERFACE_IUNKNOWNEX(IGameFrameWnd,Guid,dwQueryVer);
	return NULL;
}

//开始绘画
void CGameFrameWnd::OnBeginPaintWindow(HDC hDC)
{
	////获取设备
	//CDC * pDC = CDC::FromHandle(hDC);

	////获取标题
	//CString strTitle;
	//GetWindowText(strTitle);

	////获取位置
	//CRect rcClient;
	//GetClientRect(&rcClient);

	////框架位置
	//tagEncircleInfo FrameEncircleInfo;
	//m_FrameEncircle.GetEncircleInfo(FrameEncircleInfo);

	//////绘画框架
	////m_FrameEncircle.DrawEncircleFrame(pDC,rcClient);

	////加载图标
	//CBitImage ImageLogo;
	//ImageLogo.LoadFromResource(AfxGetInstanceHandle(),TEXT("GAME_LOGO"));

	////绘画图标
	//if (ImageLogo.IsNull()==false)
	//{
	//	//绘画图标
	//	ImageLogo.TransDrawImage(pDC,10,7,RGB(255,0,255));
	//}

	////绘画标题
	//if (strTitle.IsEmpty()==false)
	//{
	//	//计算区域
	//	CRect rcTitle;
	//	rcTitle.SetRect(35,8,rcClient.Width()-150,FrameEncircleInfo.nTBorder-8);

	//	//变量定义
	//	INT nXMove[8]={1,1,1,0,-1,-1,-1,0};
	//	INT nYMove[8]={-1,0,1,1,1,0,-1,-1};

	//	//设置环境
	//	pDC->SetBkMode(TRANSPARENT);
	//	pDC->SetTextColor(RGB(100,100,100));
	//	pDC->SelectObject(CSkinResourceManager::GetInstance()->GetDefaultFont());

	//	//绘画边框
	//	for (INT i=0;i<CountArray(nXMove);i++)
	//	{
	//		//计算位置
	//		CRect rcTitleFrame;
	//		rcTitleFrame.top=rcTitle.top+nYMove[i];
	//		rcTitleFrame.left=rcTitle.left+nXMove[i];
	//		rcTitleFrame.right=rcTitle.right+nXMove[i];
	//		rcTitleFrame.bottom=rcTitle.bottom+nYMove[i];

	//		//绘画字符
	//		pDC->DrawText(strTitle,&rcTitleFrame,DT_LEFT|DT_VCENTER|DT_SINGLELINE|DT_END_ELLIPSIS);
	//	}

	//	//绘画文字
	//	pDC->SetTextColor(RGB(255,255,255));
	//	pDC->DrawText(strTitle,&rcTitle,DT_LEFT|DT_VCENTER|DT_SINGLELINE|DT_END_ELLIPSIS);
	//}

	return;
}

//初始控件
void CGameFrameWnd::InitControlUI()
{
	//定义变量
	CGlobalUnits *pGlobalUnits=CGlobalUnits::GetInstance();

	//声音按钮
	CControlUI * pControlUI = GetControlByName(szButtonMusicControlName); 
	if(pControlUI!=NULL) pControlUI->SetVisible(pGlobalUnits->m_bMuteStatuts);

	//静音按钮
	pControlUI = GetControlByName(szButtonRuietControlName);
	if(pControlUI!=NULL) pControlUI->SetVisible(!pGlobalUnits->m_bMuteStatuts);
}

//消息提醒
void CGameFrameWnd::Notify(TNotifyUI &  msg)
{
	//获取对象
	CControlUI * pControlUI = msg.pSender;

	//点击事件
	if (lstrcmp(msg.sType, TEXT("click")) == 0)
	{		
		if(lstrcmp(pControlUI->GetName(), szButtonCloseControlName)==0)    //关闭按钮
		{
			//获取用户
			ASSERT(m_pIClientKernel!=NULL);
			IClientUserItem * pIClientUserItem=m_pIClientKernel->GetMeUserItem();

			//强退提示
			if ((pIClientUserItem!=NULL)&&(pIClientUserItem->GetUserStatus()==US_PLAYING))
			{
				//提示消息
				CInformation Information(this);
				INT nRes=0;
				if (m_pIClientKernel->GetServerAttribute()->wServerType!=GAME_GENRE_MATCH)
				{
					nRes=Information.ShowMessageBox(TEXT("您正在游戏中，强行退出将被扣分，确实要强退吗？"),MB_ICONQUESTION|MB_YESNO,0);
				}
				else if(m_pIClientKernel->GetServerAttribute()->wServerType==GAME_GENRE_MATCH && m_pIClientKernel->GetServerAttribute()->cbMatchType==MATCH_TYPE_IMMEDIATE)
				{
					nRes=Information.ShowMessageBox(TEXT("您正在比赛中，强行退出将会被系统托管，输赢自负，确实要强退吗？"),MB_ICONQUESTION|MB_YESNO,0);
				}
				else if(m_pIClientKernel->GetServerAttribute()->wServerType==GAME_GENRE_MATCH && m_pIClientKernel->GetServerAttribute()->cbMatchType==MATCH_TYPE_LOCKTIME)
				{
					nRes=Information.ShowMessageBox(TEXT("您正在比赛中，确实要强退吗？"),MB_ICONQUESTION|MB_YESNO,0);
				}
				if (nRes!=IDYES)
				{
					return;
				}
			}
			if(m_pIClientKernel->GetServerAttribute()->wServerType==GAME_GENRE_MATCH)
			{
				m_pIClientKernel->SendProcessData(IPC_CMD_GF_MATCH_INFO,IPC_SUB_GF_EXIT_MATCH);
			}
			
			//投递关闭
			PostMessage(WM_CLOSE,0,0);

			return;
		}
		else if(lstrcmp(pControlUI->GetName(), szButtonMinControlName)==0)	//最小化按钮
		{
			ShowWindow(SW_MINIMIZE);
			return;
		}
		else if(lstrcmp(pControlUI->GetName(), szButtonMaxControlName)==0 || //最大化按钮
				lstrcmp(pControlUI->GetName(), szButtonResoreControlName)==0 )
		{
			//窗口控制
			if (m_bMaxShow==true)
			{
				RestoreWindow();
			}
			else
			{
				MaxSizeWindow();
			}

			//更新界面
			RedrawWindow(NULL,NULL,RDW_ERASE|RDW_INVALIDATE|RDW_ERASENOW|RDW_UPDATENOW);

			return;
		}
		else if(lstrcmp(pControlUI->GetName(), szButtonRuleControlName)==0)		//规则按钮
		{
			CGlobalUnits *pGlobalUnits=CGlobalUnits::GetInstance();
			tagGameAttribute * pGameAttribute=pGlobalUnits->m_ClientKernelModule->GetGameAttribute();
			tagServerAttribute * pServerAttribute=pGlobalUnits->m_ClientKernelModule->GetServerAttribute();

			//获取对象
			CGlobalWebLink * pGlobalWebLink=CGlobalWebLink::GetInstance();

			//构造地址
			TCHAR szBrowser[MAX_PATH]=TEXT("");
			_sntprintf(szBrowser,CountArray(szBrowser),TEXT("%s/GameRule.aspx?GameID=%ld&KindID=%ld"),pGlobalWebLink->GetPlatformLink(),pServerAttribute->wKindID,pGameAttribute->wKindID);

			//打开页面
			ShellExecute(NULL,TEXT("OPEN"),szBrowser,NULL,NULL,SW_NORMAL);

			return;
		}
		else if(lstrcmp(pControlUI->GetName(), szButtonOptionControlName)==0)	//设置按钮
		{
			//显示配置
			CDlgGameOption DlgGameOption;
			DlgGameOption.DoModal();

			return;
		}
		else if(lstrcmp(pControlUI->GetName(), szButtonMusicControlName)==0 ||	//声音控制
				lstrcmp(pControlUI->GetName(), szButtonRuietControlName)==0)
		{
			//定义变量
			CGlobalUnits *pGlobalUnits=CGlobalUnits::GetInstance();
			pGlobalUnits->m_bMuteStatuts=!pGlobalUnits->m_bMuteStatuts;

			//声音按钮
			CControlUI * pControlUI = GetControlByName(szButtonMusicControlName); 
			if(pControlUI!=NULL) pControlUI->SetVisible(pGlobalUnits->m_bMuteStatuts);

			//静音按钮
			pControlUI = GetControlByName(szButtonRuietControlName);
			if(pControlUI!=NULL) pControlUI->SetVisible(!pGlobalUnits->m_bMuteStatuts);

			//状态处理
			if(pGlobalUnits->m_bMuteStatuts) pGlobalUnits->StopSound();

			//通知游戏
			if(m_pIClientKernel) m_pIClientKernel->OnGameOptionChange();

			return;
		}
	}
}

//消息解释
BOOL CGameFrameWnd::PreTranslateMessage(MSG * pMsg)
{
	//提示消息
	if (m_ToolTipCtrl.m_hWnd!=NULL)
	{
		m_ToolTipCtrl.RelayEvent(pMsg);
	}

	return __super::PreTranslateMessage(pMsg);
}

//还原窗口
bool CGameFrameWnd::RestoreWindow()
{
	//状态判断
	if (m_bMaxShow==true)
	{
		//设置变量
		m_bMaxShow=false;

		//最大化按钮
		CControlUI * pControlUI = GetControlByName(szButtonResoreControlName); 
		if(pControlUI!=NULL) pControlUI->SetVisible(false);

		//还原按钮
		pControlUI = GetControlByName(szButtonMaxControlName);
		if(pControlUI!=NULL) pControlUI->SetVisible();

		//移动窗口
		LockWindowUpdate();
		SetWindowPos(NULL,m_rcNormalSize.left,m_rcNormalSize.top,m_rcNormalSize.Width(),m_rcNormalSize.Height(),SWP_NOZORDER);
		UnlockWindowUpdate();
	}

	return true;
}

//最大窗口
bool CGameFrameWnd::MaxSizeWindow()
{
	//状态判断
	if (m_bMaxShow==false)
	{
		//设置变量
		m_bMaxShow=true;

		//默认位置
		GetWindowRect(&m_rcNormalSize);

		//最大化按钮
		CControlUI * pControlUI = GetControlByName(szButtonMaxControlName); 
		if(pControlUI!=NULL) pControlUI->SetVisible(false);

		//还原按钮
		pControlUI = GetControlByName(szButtonResoreControlName);
		if(pControlUI!=NULL) pControlUI->SetVisible();

		//获取位置
		CRect rcArce;
		SystemParametersInfo(SPI_GETWORKAREA,0,&rcArce,SPIF_SENDCHANGE);

		//移动窗口
		LockWindowUpdate();
		SetWindowPos(NULL,rcArce.left-2,rcArce.top-2,rcArce.Width()+4,rcArce.Height()+4,SWP_NOZORDER);
		UnlockWindowUpdate();
	}

	return true;
}

//调整控件
VOID CGameFrameWnd::RectifyControl(INT nWidth, INT nHeight)
{
	//状态判断
	if ((nWidth==0)||(nHeight==0)) return;
	if ((m_nScrollXMax==0)||(m_nScrollYMax==0)) return;

	//移动准备
	HDWP hDwp=BeginDeferWindowPos(32);
	UINT uFlags=SWP_NOACTIVATE|SWP_NOCOPYBITS|SWP_NOZORDER;

	//环绕信息
	tagEncircleInfo EncircleInfoFrame;
	m_FrameEncircle.GetEncircleInfo(EncircleInfoFrame);

	//微调一下
	EncircleInfoFrame.nTBorder-=2;
	EncircleInfoFrame.nLBorder+=2;
	EncircleInfoFrame.nRBorder+=2;
	EncircleInfoFrame.nBBorder+=2;

	//变量定义
	CRect rcSplitter;
	rcSplitter.top=EncircleInfoFrame.nTBorder;
	rcSplitter.bottom=m_nScrollYMax-EncircleInfoFrame.nBBorder;

	//拆分控件
	if (m_bShowControl==true)
	{
		rcSplitter.left=m_nScrollXMax*75L/100L;
		rcSplitter.right=rcSplitter.left+SPLITTER_CX;
	}
	else
	{
		rcSplitter.left=m_nScrollXMax-EncircleInfoFrame.nRBorder-SPLITTER_CX;
		rcSplitter.right=m_nScrollXMax-EncircleInfoFrame.nRBorder;
	}

	//查询游戏
	CGlobalUnits * pGlobalUnits=CGlobalUnits::GetInstance();
	IGameFrameView * pIGameFrameView=(IGameFrameView *)pGlobalUnits->QueryGlobalModule(MODULE_GAME_FRAME_VIEW,IID_IGameFrameView,VER_IGameFrameView);

	//游戏视图
	if (pIGameFrameView!=NULL)
	{
		HWND hWndView=pIGameFrameView->GetGameViewHwnd();
		DeferWindowPos(hDwp,hWndView,NULL,EncircleInfoFrame.nLBorder,EncircleInfoFrame.nTBorder,rcSplitter.left-EncircleInfoFrame.nLBorder,m_nScrollYMax-EncircleInfoFrame.nTBorder-EncircleInfoFrame.nBBorder,uFlags);
	}

	//移动控件
	DeferWindowPos(hDwp,m_SkinSplitter,NULL,rcSplitter.left,rcSplitter.top,rcSplitter.Width(),rcSplitter.Height(),uFlags);
	DeferWindowPos(hDwp,m_GameFrameControl,NULL,rcSplitter.right,EncircleInfoFrame.nTBorder,m_nScrollXMax-rcSplitter.right-EncircleInfoFrame.nRBorder,m_nScrollYMax-EncircleInfoFrame.nBBorder-EncircleInfoFrame.nTBorder,uFlags);

	//移动结束
	EndDeferWindowPos(hDwp);

	//动画控件
	CRect rcWindow;
	HWND hGameViewWnd = m_pIGameFrameView->GetGameViewHwnd();
	::GetWindowRect(hGameViewWnd,rcWindow);
	m_FlashControl.SetPosition(rcWindow.left+(rcWindow.Width()-FALSH_MOVIE_CX)/2,rcWindow.top+(rcWindow.Height()-FALSH_MOVIE_CY)*2/5,FALSH_MOVIE_CX,FALSH_MOVIE_CY,SWP_NOSIZE);

	return;
}

//位置消息
VOID CGameFrameWnd::OnSize(UINT nType, INT cx, INT cy) 
{
	__super::OnSize(nType, cx, cy);

	//滚动数据
	m_nScrollXMax=__max(LESS_SCREEN_CX,cx);
	m_nScrollYMax=__max(LESS_SCREEN_CY,cy);
	m_nScrollXPos=__min(0L,m_nScrollXMax-cy);
	m_nScrollYPos=__min(0L,m_nScrollYMax-cy);
	
	//变量定义
	SCROLLINFO ScrollInfoVert;
	SCROLLINFO ScrollInfoHorz;
	ZeroMemory(&ScrollInfoVert,sizeof(ScrollInfoVert));
	ZeroMemory(&ScrollInfoHorz,sizeof(ScrollInfoHorz));

	//设置滚动
	ScrollInfoVert.cbSize=sizeof(ScrollInfoVert);
	ScrollInfoVert.fMask=SIF_RANGE|SIF_PAGE|SIF_POS;
	ScrollInfoVert.nMin=0;
	ScrollInfoVert.nMax=m_nScrollYMax;
	ScrollInfoVert.nPage=cy;
	ScrollInfoVert.nPos=m_nScrollYPos;

	//设置滚动
	ScrollInfoHorz.cbSize=sizeof(ScrollInfoHorz);
	ScrollInfoHorz.fMask=SIF_RANGE|SIF_PAGE|SIF_POS;
	ScrollInfoHorz.nMin=0;
	ScrollInfoHorz.nMax=m_nScrollXMax;
	ScrollInfoHorz.nPage=cx;
	ScrollInfoHorz.nPos=m_nScrollXPos;

	//调整控件
	RectifyControl(cx,cy);

	return;
}

//位置信息
VOID CGameFrameWnd::OnGetMinMaxInfo(MINMAXINFO * lpMMI)
{
	__super::OnGetMinMaxInfo(lpMMI);

	//窗口位置
	CRect rcArce;
	SystemParametersInfo(SPI_GETWORKAREA,0,&rcArce,SPIF_SENDCHANGE);

	//设置位置
	lpMMI->ptMinTrackSize.x=__min(LESS_SCREEN_CX,rcArce.Width());
	lpMMI->ptMinTrackSize.y=__min(LESS_SCREEN_CY,rcArce.Height());

	return;
}

//建立消息
INT CGameFrameWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (__super::OnCreate(lpCreateStruct)==-1) return -1;

	//设置窗口
	ModifyStyle(WS_CAPTION,0,0);
	ModifyStyleEx(WS_BORDER|WS_EX_CLIENTEDGE|WS_EX_WINDOWEDGE,0,0);

	//设置窗口
	ModifyStyle(0, WS_MINIMIZEBOX);
	ModifyStyle(0, WS_MAXIMIZEBOX);

	//变量定义
	ASSERT(CGlobalUnits::GetInstance()!=NULL);
	CGlobalUnits * pGlobalUnits=CGlobalUnits::GetInstance();

	//查询接口
	m_pIClientKernel=(IClientKernel *)pGlobalUnits->QueryGlobalModule(MODULE_CLIENT_KERNEL,IID_IClientKernel,VER_IClientKernel);
	m_pIGameFrameView=(IGameFrameView *)pGlobalUnits->QueryGlobalModule(MODULE_GAME_FRAME_VIEW,IID_IGameFrameView,VER_IGameFrameView);

	//创建按钮
	CRect rcCreate(0,0,0,0);
	//设置按钮
	HINSTANCE hInstance=GetModuleHandle(GAME_FRAME_DLL_NAME);

	//控制窗口
	AfxSetResourceHandle(hInstance);
	m_GameFrameControl.Create(IDD_GAME_CONTROL,this);
	m_SkinSplitter.Create(NULL,NULL,WS_CHILD|WS_VISIBLE,rcCreate,this,IDC_SKIN_SPLITTER);

	//提示控件
	m_ToolTipCtrl.Create(this);
	m_ToolTipCtrl.Activate(TRUE);

	//设置位置
	CSize SizeRestrict;
	SizeRestrict.SetSize(LESS_SCREEN_CX,LESS_SCREEN_CY);

	//窗口位置
	CRect rcArce;
	SystemParametersInfo(SPI_GETWORKAREA,0,&rcArce,SPIF_SENDCHANGE);

	//读取位置
	CWHRegKey InfoKeyItem;
	if (InfoKeyItem.OpenRegKey(REG_INTERFACE_INFO,false)==true)
	{
		SizeRestrict.cx=InfoKeyItem.GetValue(TEXT("ScreenWidth"),rcArce.Width()/2);
		SizeRestrict.cy=InfoKeyItem.GetValue(TEXT("ScreenHeight"),rcArce.Height()/2);
	}

	//位置调整
	SizeRestrict.cx=__max(LESS_SCREEN_CX,SizeRestrict.cx);
	SizeRestrict.cy=__max(LESS_SCREEN_CY,SizeRestrict.cy);
	SizeRestrict.cx=__min(rcArce.Width(),SizeRestrict.cx);
	SizeRestrict.cy=__min(rcArce.Height(),SizeRestrict.cy);

	//移动窗口
	m_rcNormalSize.top=(rcArce.Height()-SizeRestrict.cy)/2;
	m_rcNormalSize.left=(rcArce.Width()-SizeRestrict.cx)/2;
	m_rcNormalSize.right=m_rcNormalSize.left+SizeRestrict.cx;
	m_rcNormalSize.bottom=m_rcNormalSize.top+SizeRestrict.cy;
	SetWindowPos(NULL,m_rcNormalSize.left,m_rcNormalSize.top,m_rcNormalSize.Width(),m_rcNormalSize.Height(),SWP_NOZORDER);

	//创建视图
	ASSERT(m_pIGameFrameView!=NULL);
	if (m_pIGameFrameView!=NULL) m_pIGameFrameView->CreateGameViewWnd(this,IDC_GAME_CLIENT_VIEW);

	//动画控件
	IUnknownEx * pIUnknownEx=QUERY_ME_INTERFACE(IFlashControlSink);
	m_FlashControl.CreateControl(this,CRect(0,0,FALSH_MOVIE_CX,FALSH_MOVIE_CY),pIUnknownEx);
	m_FlashControl.ShowControl(SW_HIDE);

	//注册接口
	m_pIClientKernel->SetClientPropertySink(QUERY_ME_INTERFACE(IClientPropertySink));

	//显示窗口
	MaxSizeWindow();

	return 0L;
}

//鼠标消息
VOID CGameFrameWnd::OnLButtonDblClk(UINT nFlags, CPoint Point)
{
	__super::OnLButtonDblClk(nFlags,Point);

	//状态判断
	if (Point.y>CAPTION_SIZE) return;

	//窗口控制
	if (m_bMaxShow==true)
	{
		RestoreWindow();
	}
	else
	{
		MaxSizeWindow();
	}
	
	return;
}

//设置改变
VOID CGameFrameWnd::OnSettingChange(UINT uFlags, LPCTSTR lpszSection)
{
	__super::OnSettingChange(uFlags,lpszSection);

	//获取大小
	CRect rcClient,rcWindow;
	GetClientRect(&rcClient);
	GetWindowRect(&rcWindow);
	ClientToScreen(&rcClient);

	//计算位置
	CRect rcArce;
	SystemParametersInfo(SPI_GETWORKAREA,0,&rcArce,0);

	//调整位置
	rcArce.top-=(rcClient.top-rcWindow.top);
	rcArce.left-=(rcClient.left-rcWindow.left);
	rcArce.right+=(rcWindow.right-rcClient.right);
	rcArce.bottom+=(rcWindow.bottom-rcClient.bottom);

	//移动窗口
	SetWindowPos(NULL,rcArce.left,rcArce.top,rcArce.Width(),rcArce.Height(),SWP_NOZORDER|SWP_NOCOPYBITS);

	return;
}

//标题消息
LRESULT	CGameFrameWnd::OnSetTextMesage(WPARAM wParam, LPARAM lParam)
{
	//默认调用
	LRESULT lResult=DefWindowProc(WM_SETTEXT,wParam,lParam);

	//更新标题
	Invalidate(TRUE);

	return lResult;
}

//游戏规则
bool CGameFrameWnd::ShowGameRule()
{
// 	try
// 	{
// 		//创建对象
// 		if (m_pDlgGameRule==NULL) m_pDlgGameRule=new CDlgGameRule;
// 
// 		//创建窗口
// 		if (m_pDlgGameRule->m_hWnd==NULL)
// 		{
// 			AfxSetResourceHandle(GetModuleHandle(GAME_FRAME_DLL_NAME));
// 			m_pDlgGameRule->Create(IDD_GAME_RULE,GetDesktopWindow());
// 			AfxSetResourceHandle(GetModuleHandle(NULL));
// 		}
// 
// 		//显示窗口
// 		m_pDlgGameRule->ShowWindow(SW_RESTORE);
// 		m_pDlgGameRule->SetForegroundWindow();
// 
// 		return true;
// 	}
// 	catch (...)
// 	{ 
// 		ASSERT(FALSE); 
// 		return false; 
// 	}

	return false;
}

//声音控制
bool CGameFrameWnd::AllowGameSound(bool bAllowSound)
{
	//设置变量
	CGlobalUnits *pGlobalUnits=CGlobalUnits::GetInstance();
	pGlobalUnits->m_bAllowSound=bAllowSound;

	return true;
}

//控制接口
bool CGameFrameWnd::OnGameOptionChange()
{
	//定义变量
	CGlobalUnits *pGlobalUnits=CGlobalUnits::GetInstance();

	//通知游戏
	if(m_pIClientKernel)
	{
		AllowGameSound(pGlobalUnits->m_bAllowSound);
		AllowGameLookon(0L, pGlobalUnits->m_bAllowLookon);
		m_pIClientKernel->OnGameOptionChange();
	}

	return true;
}

//播放完成
VOID CGameFrameWnd::OnEventFlashFinish()
{
	m_FlashControl.ShowControl(SW_HIDE);
}

//道具成功
VOID  CGameFrameWnd::OnPropertySuccess(LPCTSTR szSourceNickName,DWORD dwSourceUserID,DWORD dwTargerUserID,WORD wPropertyIndex,WORD wPropertyCount)
{
	//获取对象
	ASSERT(CGamePropertyManager::GetInstance()!=NULL);
	CGamePropertyManager * pGamePropertyManager=CGamePropertyManager::GetInstance();

	//寻找道具
	ASSERT(pGamePropertyManager->GetPropertyItem(wPropertyIndex)!=NULL);
	CGamePropertyBase * pGamePropertyItem=pGamePropertyManager->GetPropertyItem(wPropertyIndex);

	//道具处理
	if (pGamePropertyItem!=NULL && pGamePropertyItem->GetPropertyAttrib()->wPropertyType==PT_TYPE_PRESENT)
	{
		//图片信息
		tagPropertyImage PropertyImage;
		pGamePropertyItem->GetImageInfo(PropertyImage);

		//播放动画
		if ((PropertyImage.pszFlash!=NULL)&&(PropertyImage.pszFlash[0]!=0))
		{
			//工作路径
			TCHAR szDirectory[MAX_PATH]=TEXT("");
			CWHService::GetWorkDirectory(szDirectory,CountArray(szDirectory));

			//构造路径
			TCHAR szFlashPath[MAX_PATH]=TEXT("");
			_sntprintf(szFlashPath,CountArray(szFlashPath),TEXT("%s\\Property\\%s"),szDirectory,PropertyImage.pszFlash);

			try
			{
				//播放动画
				if (m_FlashControl.LoadMovieFile(szFlashPath)==false)
				{
					throw TEXT("动画文件加载失败");
				}

				//动画控件
				CRect rcWindow;
				HWND hGameViewWnd = m_pIGameFrameView->GetGameViewHwnd();
				::GetWindowRect(hGameViewWnd,rcWindow);
				m_FlashControl.SetPosition(rcWindow.left+(rcWindow.Width()-FALSH_MOVIE_CX)/2,rcWindow.top+(rcWindow.Height()-FALSH_MOVIE_CY)*2/5,FALSH_MOVIE_CX,FALSH_MOVIE_CY,SWP_NOSIZE);

				//播放动画
				m_FlashControl.PlayMovie();
				m_FlashControl.ShowControl(SW_SHOW);
			}
			catch (...)
			{
				ASSERT(FALSE);
			}
		}
	}

	//道具提示
	if(pGamePropertyItem->GetPropertyAttrib()->wPropertyType==PT_TYPE_PROPERTY)
	{
		//变量定义
		TCHAR  szMessage[256]=TEXT("");
		IClientUserItem * pMeUserItem = m_pIClientKernel->GetMeUserItem();

		//获取提示
		if(dwSourceUserID==pMeUserItem->GetUserID() && dwSourceUserID!=dwTargerUserID)
            _sntprintf(szMessage,CountArray(szMessage),TEXT("恭喜您,道具购买成功!"));
		else
		{
			if(dwSourceUserID==dwTargerUserID)
				pGamePropertyItem->GetNotifyMessage(szSourceNickName,szSourceNickName,wPropertyCount,szMessage);
			else
				pGamePropertyItem->GetNotifyMessage(szSourceNickName,pMeUserItem->GetNickName(),wPropertyCount,szMessage);
		}

		//弹出消息
		CInformation Information;
		Information.ShowMessageBox(szMessage,MB_ICONINFORMATION);
	}

	return;
}

//道具失败
VOID CGameFrameWnd::OnPropertyFailure( LONG lErrorCode,LPCTSTR szDescribeString)
{
	//弹出消息
	CInformation Information;
	Information.ShowMessageBox(szDescribeString,MB_ICONINFORMATION);

	return;
}

bool CGameFrameWnd::SetTrumpetNum(DWORD dwTrumpetCount,DWORD dwTyphonCount)
{
	m_GameFrameControl.SetTrumpetNum(dwTrumpetCount,dwTyphonCount);
	return true;
}

//旁观控制
bool CGameFrameWnd::AllowGameLookon(DWORD dwUserID, bool bAllowLookon)
{
	//发送消息
	m_pIClientKernel->SendUserLookon(dwUserID,bAllowLookon);

	return true;
}

//窗口销毁
void CGameFrameWnd::OnDestroy()
{
	__super::OnDestroy();

	//删除D2D程序
	CD2DEngine::Delete();
}
//////////////////////////////////////////////////////////////////////////////////


